// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Errosion
#pragma kernel VolDistr

#pragma enable_d3d11_debug_symbols

RWStructuredBuffer<float> output_terrain;
StructuredBuffer<float> cur_delta;
int terrain_size;

float size_x;
float size_z;

float position_x;
float position_z;

float dzlim;

uint CalcPos(uint x, uint y)
{
    return y + x * terrain_size;
}

[numthreads(8,8,1)]
void Errosion(uint3 id : SV_DispatchThreadID)
{
    uint pos = CalcPos(id.x, id.y);

    if ((id.x >= 1 && id.x <= terrain_size - 1) && (id.y >= 1 && id.y <= terrain_size - 1) && cur_delta[pos] == 0)
    {
        uint pos_1 = CalcPos(id.x + 1, id.y);
        uint pos_2 = CalcPos(id.x - 1, id.y);
        uint pos_3 = CalcPos(id.x, id.y + 1);
        uint pos_4 = CalcPos(id.x, id.y - 1);

        float dz_1 = output_terrain[pos] - output_terrain[pos_1];
        float dz_2 = output_terrain[pos] - output_terrain[pos_2];
        float dz_3 = output_terrain[pos] - output_terrain[pos_3];
        float dz_4 = output_terrain[pos] - output_terrain[pos_4];

        float sum = 0;
        float max_dz = 0;

        if (dz_1 > 0)
        {
            sum += dz_1;
            max_dz = max(max_dz, dz_1);
        }

        if (dz_2 > 0)
        {
            sum += dz_2;
            max_dz = max(max_dz, dz_2);
        }
         
        if (dz_3 > 0)
        {
            sum += dz_3;
            max_dz = max(max_dz, dz_3);
        }

        if (dz_4 > 0)
        {
            sum += dz_4;
            max_dz = max(max_dz, dz_4);
        }

        if (sum == 0)
            return;

        if (max_dz > dzlim) {
            float step_1 = (max_dz - dzlim) / 2;

            output_terrain[pos] -= step_1;
            if (dz_1 > 0)
                output_terrain[pos_1] += step_1 * (dz_1 / sum);
            if (dz_2 > 0)
                output_terrain[pos_2] += step_1 * (dz_2 / sum);
            if (dz_3 > 0)
                output_terrain[pos_3] += step_1 * (dz_3 / sum);
            if (dz_4 > 0)
                output_terrain[pos_4] += step_1 * (dz_4 / sum);
        }
    }
}

float step_x;
float step_z;
float scale_y;
StructuredBuffer<double3> border_coords;
StructuredBuffer<double> final_delta_sink;
StructuredBuffer<double> final_delta_buld;
RWStructuredBuffer<double> dist;
RWStructuredBuffer<double> distr_buld;

RWStructuredBuffer<double> output_delta_border;

int border_count;
float velocity_x;
float velocity_y;
float velocity_z;

double calc_vector_len(double3 vec)
{
    return sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
}

double sqr(double num)
{
    return num * num;
}

[numthreads(8, 8, 1)]
void VolDistr(uint3 id : SV_DispatchThreadID)
{
    uint pos = CalcPos(id.x, id.y);

    double summ_dist = 0;
    double summ_distr_sink_buld = 0;

    if ((id.x >= 1 && id.x <= terrain_size - 1) && (id.y >= 1 && id.y <= terrain_size - 1) && cur_delta[pos] != 0)
    {
        int j = id.y;
        int i = id.x;

        for (int k = 0; k < border_count; k++)
        {
            dist[k] = sqr((step_z * j - step_x * border_coords[k].x)) +
                      sqr((step_x * i - step_x * border_coords[k].z)) +
                      sqr((cur_delta[pos] * scale_y - border_coords[k].y * scale_y));
            summ_dist += dist[k];

            double3 vec_dist = double3( step_z * j - step_z * border_coords[k].x,
                cur_delta[pos] * scale_y - border_coords[k].y * scale_y,
                step_z * i - step_z * border_coords[k].z );

            double cosa = (vec_dist.x * velocity_x +
                vec_dist.y * velocity_y +
                vec_dist.z * velocity_z) /
                (calc_vector_len(vec_dist) * calc_vector_len(double3(velocity_x, velocity_y, velocity_z)));

            distr_buld[k] = 0;
            if (cosa > 0)
            {
                distr_buld[k] = cosa;
            }

            summ_distr_sink_buld += distr_buld[k];
        }

        for (int k = 0; k < border_count; k++)
        {
            double distr_sink_coef = dist[k] / summ_dist;//1 / dist[k];
            output_delta_border[k] += distr_sink_coef * final_delta_sink[pos];

            double distr_sink_buld_fin = distr_buld[k] / summ_distr_sink_buld;
            output_delta_border[k] += distr_sink_buld_fin * final_delta_buld[pos];
        }
    }
}
